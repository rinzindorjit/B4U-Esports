// ==============================================
// CONFIGURATION AND CONSTANTS
// ==============================================
const CONFIG = {
  API_BASE_URL: window.location.origin + '/api',
  APPROVE_PAYMENT_ENDPOINT: '/approve-payment',
  COMPLETE_PAYMENT_ENDPOINT: '/complete-payment',
  DEBUG_MODE: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1',
  USE_TESTNET: true // Using Pi Testnet
};

// Package data
const PACKAGES = {
  pubg: [
    { uc: 60, price: 2, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 325, price: 8, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 660, price: 15, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 1800, price: 25, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 3850, price: 50, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 8100, price: 92, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 16200, price: 185, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 24300, price: 275, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 32400, price: 365, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' },
    { uc: 45000, price: 455, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077315-1.png' }
  ],
  mlbb: [
    { dias: 55, price: 2, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 275, price: 8, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 565, price: 12, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 1155, price: 25, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 1765, price: 35, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 2975, price: 55, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 6000, price: 105, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' },
    { dias: 12000, price: 205, img: 'https://b4uesports.com/wp-content/uploads/2025/04/1000077486.png' }
  ]
};

// ==============================================
// STATE MANAGEMENT
// ==============================================
const state = {
  currentPayment: {
    product: '',
    amount: 0,
    memo: '',
    type: '',
    quantity: null,
    paymentId: null,
    txid: null,
    metadata: {}
  },
  currentUser: null,
  piSDKInitialized: false
};

// ==============================================
// DOM ELEMENTS
// ==============================================
const elements = {
  hamburger: document.getElementById('hamburger'),
  sidebar: document.getElementById('sidebar'),
  overlay: document.getElementById('overlay'),
  piAuthBtn: document.getElementById('pi-auth-btn'),
  piActions: document.getElementById('pi-actions'),
  piWalletBtn: document.getElementById('pi-wallet-btn'),
  piShareBtn: document.getElementById('pi-share-btn'),
  piPayBtn: document.getElementById('piPayBtn'),
  paymentStatus: document.getElementById('paymentStatus'),
  productName: document.getElementById('productName'),
  piAmount: document.getElementById('piAmount'),
  piUsername: document.getElementById('piUsername'),
  userEmail: document.getElementById('userEmail'),
  socialUrl: document.getElementById('socialUrl'),
  pubgId: document.getElementById('pubgId'),
  mlbbUserId: document.getElementById('mlbbUserId'),
  mlbbZoneId: document.getElementById('mlbbZoneId'),
  urlGroup: document.getElementById('urlGroup'),
  pubgIdGroup: document.getElementById('pubgIdGroup'),
  mlbbUserIdGroup: document.getElementById('mlbbUserIdGroup'),
  mlbbZoneIdGroup: document.getElementById('mlbbZoneIdGroup'),
  tokenSelectionModal: document.getElementById('tokenSelectionModal'),
  packageModal: document.getElementById('packageModal'),
  packageList: document.getElementById('packageList'),
  packageModalTitle: document.getElementById('packageModalTitle'),
  paymentModal: document.getElementById('paymentModal')
};

// ==============================================
// UTILITY FUNCTIONS
// ==============================================
const utils = {
  log: function(message, data = null) {
    if (CONFIG.DEBUG_MODE) {
      console.log(`[B4U Esports] ${message}`, data || '');
    }
  },
  
  error: function(message, error = null) {
    console.error(`[B4U Esports] ${message}`, error || '');
  },
  
  showNotification: function(message, type = 'info') {
    // Remove any existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // Create new notification
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 100px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 8px;
      color: white;
      z-index: 2000;
      max-width: 350px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      animation: slideIn 0.3s ease;
    `;
    
    if (type === 'error') {
      notification.style.background = 'rgba(239, 68, 68, 0.9)';
    } else if (type === 'success') {
      notification.style.background = 'rgba(16, 185, 129, 0.9)';
    } else {
      notification.style.background = 'rgba(59, 28, 99, 0.9)';
    }
    
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => notification.remove(), 300);
      }
    }, 5000);
  },
  
  validateEmail: function(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  },
  
  validateUrl: function(url) {
    try {
      new URL(url);
      return true;
    } catch (_) {
      return false;
    }
  }
};

// ==============================================
// PI NETWORK INTEGRATION
// ==============================================
const piNetwork = {
  initialize: async function() {
    try {
      utils.log("Initializing Pi Network SDK...");
      
      // Initialize SDK with your app credentials
      Pi.init({
        version: "2.0", 
        sandbox: CONFIG.USE_TESTNET // true for testnet, false for mainnet
      }).then(async () => {
        utils.log("Pi SDK initialized successfully");
        state.piSDKInitialized = true;
        this.setupEventListeners();
        
        // Check if user is already authenticated
        if (Pi.isAuthenticated()) {
          try {
            const authResult = await Pi.authenticate(['username', 'payments'], this.onIncompletePaymentFound);
            state.currentUser = authResult.user;
            this.handleSuccessfulAuth(authResult);
          } catch (error) {
            utils.error("Auto-authentication failed:", error);
          }
        }
      }).catch(error => {
        utils.error("Pi SDK initialization failed:", error);
        elements.piAuthBtn.innerHTML = '<i class="fas fa-exclamation-circle"></i> Retry Sign In';
        elements.piAuthBtn.disabled = false;
      });

    } catch (error) {
      utils.error("Error initializing Pi SDK:", error);
      elements.piAuthBtn.innerHTML = '<i class="fas fa-exclamation-circle"></i> Retry Sign In';
      elements.piAuthBtn.disabled = false;
    }
  },
  
  setupEventListeners: function() {
    elements.piAuthBtn.addEventListener('click', this.authenticateUser);
    elements.piWalletBtn?.addEventListener('click', this.showWalletAddress);
    elements.piShareBtn?.addEventListener('click', this.openShareDialog);
    elements.piPayBtn?.addEventListener('click', this.processPayment);
  },
  
  authenticateUser: async function() {
    if (!state.piSDKInitialized) {
      utils.showNotification("Pi Network SDK is not initialized yet. Please wait...", "error");
      return;
    }

    elements.piAuthBtn.disabled = true;
    elements.piAuthBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Signing In...';

    try {
      const scopes = ['username', 'payments'];
      const authResult = await Pi.authenticate(scopes, piNetwork.onIncompletePaymentFound);
      utils.log("Pi user authenticated:", authResult);
      state.currentUser = authResult.user;
      piNetwork.handleSuccessfulAuth(authResult);
    } catch (error) {
      utils.error("Authentication error:", error);
      elements.piAuthBtn.innerHTML = '<i class="fas fa-exclamation-circle"></i> Retry Sign In';
      elements.piAuthBtn.disabled = false;
      
      if (error.message.includes('User cancelled') || error.message.includes('user_cancelled')) {
        utils.showNotification("You cancelled the authentication process. Please try again.", "info");
      } else {
        utils.showNotification("Authentication failed: " + error.message, "error");
      }
    }
  },
  
  handleSuccessfulAuth: function(authResult) {
    elements.piAuthBtn.innerHTML = `<i class="fas fa-check-circle"></i> Signed in as ${authResult.user.username}`;
    elements.piAuthBtn.disabled = true;
    
    elements.piActions.style.display = 'flex';
    elements.piPayBtn.disabled = false;
    
    if (authResult.user.username) {
      elements.piUsername.value = authResult.user.username;
      elements.piUsername.setAttribute('readonly', true);
    }
    
    utils.showNotification(`Welcome ${authResult.user.username}!`, "success");
  },
  
  onIncompletePaymentFound: function(payment) {
    utils.log("Incomplete payment found:", payment);
    return confirm("You have an incomplete payment. Do you want to continue with this payment?");
  },
  
  showWalletAddress: function() {
    if (!state.currentUser) {
      utils.showNotification("Please authenticate first", "error");
      return;
    }
    
    Pi.getWalletAddress().then(address => {
      alert(`Your Pi Wallet Address:\n${address}`);
    }).catch(error => {
      utils.error("Error getting wallet address:", error);
      utils.showNotification("Failed to get wallet address: " + error.message, "error");
    });
  },
  
  openShareDialog: function() {
    const title = "B4U Esports";
    const message = "Check out B4U Esports - The ultimate gaming marketplace with Pi Network integration!";
    Pi.openShareDialog(title, message);
  },
  
  processPayment: async function() {
    if (!state.currentUser) {
      utils.showNotification("Please authenticate with Pi Network first", "error");
      return;
    }

    const piAmount = parseFloat(elements.piAmount.value);
    if (!piAmount || piAmount < 0) {
      elements.paymentStatus.textContent = "Please enter a valid PI amount (minimum 0)";
      elements.paymentStatus.className = "payment-status payment-error";
      elements.paymentStatus.style.display = "block";
      return;
    }

    const userEmail = elements.userEmail.value;
    if (!userEmail || !utils.validateEmail(userEmail)) {
      elements.paymentStatus.textContent = "Please enter a valid email address";
      elements.paymentStatus.className = "payment-status payment-error";
      elements.paymentStatus.style.display = "block";
      return;
    }

    const paymentData = {
      amount: piAmount,
      memo: state.currentPayment.memo,
      metadata: {
        product: state.currentPayment.product,
        piUsername: elements.piUsername.value,
        userEmail: userEmail,
        type: state.currentPayment.type,
        timestamp: new Date().toISOString(),
        testnet: CONFIG.USE_TESTNET
      }
    };

    // Validate and add additional fields based on payment type
    if (!piNetwork.validatePaymentData(paymentData)) {
      return;
    }

    const paymentCallbacks = {
      onReadyForServerApproval: async function(paymentId) {
        utils.log("Ready for server approval with paymentId:", paymentId);
        state.currentPayment.paymentId = paymentId;
        elements.paymentStatus.textContent = "Waiting for server approval...";
        elements.paymentStatus.className = "payment-status";
        elements.paymentStatus.style.display = "block";

        try {
          // Call your backend API to approve the payment
          const response = await fetch(CONFIG.API_BASE_URL + CONFIG.APPROVE_PAYMENT_ENDPOINT, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${state.currentUser.accessToken}`
            },
            body: JSON.stringify({
              paymentId: paymentId,
              paymentData: paymentData
            })
          });
          
          if (!response.ok) {
            throw new Error(`Server approval failed with status ${response.status}`);
          }
          
          const result = await response.json();
          utils.log("Payment approved:", result);
        } catch (error) {
          utils.error("Server approval error:", error);
          elements.paymentStatus.textContent = "Server approval failed: " + error.message;
          elements.paymentStatus.className = "payment-status payment-error";
          elements.paymentStatus.style.display = "block";
        }
      },
      onReadyForServerCompletion: async function(paymentId, txid) {
        utils.log("Ready for server completion with paymentId and txid:", paymentId, txid);
        state.currentPayment.txid = txid;
        elements.paymentStatus.textContent = "Completing payment...";

        try {
          // Call your backend API to complete the payment
          const response = await fetch(CONFIG.API_BASE_URL + CONFIG.COMPLETE_PAYMENT_ENDPOINT, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${state.currentUser.accessToken}`
            },
            body: JSON.stringify({
              paymentId: paymentId,
              txid: txid,
              paymentData: paymentData
            })
          });
          
          if (!response.ok) {
            throw new Error(`Server completion failed with status ${response.status}`);
          }
          
          const result = await response.json();
          utils.log("Payment completed successfully:", result);
          elements.paymentStatus.textContent = 
            "Payment successful! Please send the transaction screenshot to info@b4uesports.com or WhatsApp: +97517875099.";
          elements.paymentStatus.className = "payment-status payment-success";
          elements.paymentStatus.style.display = "block";
          
          setTimeout(modal.closePaymentModal, 5000);
        } catch (error) {
          utils.error("Payment completion error:", error);
          elements.paymentStatus.textContent = 
            "Payment completion failed: " + error.message;
          elements.paymentStatus.className = "payment-status payment-error";
          elements.paymentStatus.style.display = "block";
        }
      },
      onCancel: function(paymentId) {
        utils.log("Payment cancelled with paymentId:", paymentId);
        elements.paymentStatus.textContent = "Payment cancelled";
        elements.paymentStatus.className = "payment-status payment-error";
        elements.paymentStatus.style.display = "block";
        setTimeout(modal.closePaymentModal, 3000);
      },
      onError: function(error, payment) {
        utils.error("Payment error:", error, payment);
        elements.paymentStatus.textContent = "Error: " + error.message;
        elements.paymentStatus.className = "payment-status payment-error";
        elements.paymentStatus.style.display = "block";
      }
    };

    try {
      await Pi.createPayment(paymentData, paymentCallbacks);
      utils.log("Payment creation initiated");
      elements.paymentStatus.textContent = "Initiating payment...";
      elements.paymentStatus.className = "payment-status";
      elements.paymentStatus.style.display = "block";
    } catch (error) {
      utils.error("Payment creation error:", error);
      elements.paymentStatus.textContent = "Payment creation failed: " + error.message;
      elements.paymentStatus.className = "payment-status payment-error";
      elements.paymentStatus.style.display = "block";
    }
  },
  
  validatePaymentData: function(paymentData) {
    if (state.currentPayment.type === 'social') {
      const socialUrl = elements.socialUrl.value;
      if (!socialUrl || !utils.validateUrl(socialUrl)) {
        elements.paymentStatus.textContent = "Please enter a valid social media URL";
        elements.paymentStatus.className = "payment-status payment-error";
        elements.paymentStatus.style.display = "block";
        return false;
      }
      paymentData.metadata.socialUrl = socialUrl;
    } else if (state.currentPayment.type === 'pubg') {
      const pubgId = elements.pubgId.value;
      if (!pubgId || isNaN(pubgId)) {
        elements.paymentStatus.textContent = "Please enter a valid numeric PUBG Mobile Player ID";
        elements.paymentStatus.className = "payment-status payment-error";
        elements.paymentStatus.style.display = "block";
        return false;
      }
      paymentData.metadata.pubgId = parseInt(pubgId);
      paymentData.metadata.ucAmount = state.currentPayment.quantity;
    } else if (state.currentPayment.type === 'mlbb') {
      const mlbbUserId = elements.mlbbUserId.value;
      const mlbbZoneId = elements.mlbbZoneId.value;
      if (!mlbbUserId || isNaN(mlbbUserId) || !mlbbZoneId || isNaN(mlbbZoneId)) {
        elements.paymentStatus.textContent = "Please enter valid numeric MLBB User ID and Zone ID";
        elements.paymentStatus.className = "payment-status payment-error";
        elements.paymentStatus.style.display = "block";
        return false;
      }
      paymentData.metadata.mlbbUserId = parseInt(mlbbUserId);
      paymentData.metadata.mlbbZoneId = parseInt(mlbbZoneId);
      paymentData.metadata.diasAmount = state.currentPayment.quantity;
    }
    
    return true;
  }
};

// ==============================================
// MODAL MANAGEMENT
// ==============================================
const modal = {
  openTokenSelectionModal: function() {
    if (!state.currentUser) {
      utils.showNotification("Please sign in with Pi Network first", "error");
      return;
    }
    elements.tokenSelectionModal.style.display = 'flex';
  },
  
  closeTokenSelectionModal: function() {
    elements.tokenSelectionModal.style.display = 'none';
  },
  
  openPackageModal: function(type) {
    const packageList = elements.packageList;
    
    packageList.innerHTML = '';
    const packages = type === 'pubg' ? PACKAGES.pubg : PACKAGES.mlbb;
    elements.packageModalTitle.textContent = type === 'pubg' ? 'Select PUBG Mobile UC Package' : 'Select MLBB Diamonds Package';
    
    packages.forEach(pkg => {
      const packageDiv = document.createElement('div');
      packageDiv.className = 'package';
      packageDiv.innerHTML = `
        <img src="${pkg.img}" alt="${type === 'pubg' ? pkg.uc + ' UC' : pkg.dias + ' DIAS'}" style="width: 100%; height: 100px; object-fit: contain;">
        <div class="package-title">${type === 'pubg' ? pkg.uc + ' UC' : pkg.dias + ' DIAS'}</div>
        <div class="package-price">${pkg.price} Testnet π</div>
        <button class="package-buy-btn" onclick="modal.openPaymentModal('${type === 'pubg' ? pkg.uc + ' UC' : pkg.dias + ' DIAS'}', ${pkg.price}, '${type}', ${type === 'pubg' ? pkg.uc : pkg.dias}); modal.closePackageModal()">
          <i class="fas fa-coins"></i> Buy Now
        </button>
      `;
      packageList.appendChild(packageDiv);
    });
    
    elements.packageModal.style.display = 'flex';
    modal.closeTokenSelectionModal();
  },
  
  closePackageModal: function() {
    elements.packageModal.style.display = 'none';
  },
  
  openPaymentModal: function(product, amount, type, quantity = null) {
    if (!state.currentUser) {
      utils.showNotification("Please sign in with Pi Network first", "error");
      return;
    }
    
    state.currentPayment.product = product;
    state.currentPayment.amount = amount;
    state.currentPayment.memo = `Payment for ${product}`;
    state.currentPayment.type = type;
    state.currentPayment.quantity = quantity;
    
    elements.productName.value = product;
    elements.piAmount.value = amount;
    
    elements.urlGroup.style.display = type === 'social' ? 'block' : 'none';
    elements.pubgIdGroup.style.display = type === 'pubg' ? 'block' : 'none';
    elements.mlbbUserIdGroup.style.display = type === 'mlbb' ? 'block' : 'none';
    elements.mlbbZoneIdGroup.style.display = type === 'mlbb' ? 'block' : 'none';
    
    elements.userEmail.value = '';
    elements.socialUrl.value = '';
    elements.pubgId.value = '';
    elements.mlbbUserId.value = '';
    elements.mlbbZoneId.value = '';
    elements.paymentStatus.style.display = 'none';
    
    elements.paymentModal.style.display = 'flex';
  },
  
  closePaymentModal: function() {
    elements.paymentModal.style.display = 'none';
    state.currentPayment.paymentId = null;
    state.currentPayment.txid = null;
  }
};

// ==============================================
// NAVIGATION AND UI FUNCTIONS
// ==============================================
const navigation = {
  init: function() {
    elements.hamburger.addEventListener('click', this.toggleSidebar);
    elements.overlay.addEventListener('click', this.closeSidebar);
    
    // Add CSS for notifications
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
    `;
    document.head.appendChild(style);
  },
  
  toggleSidebar: function() {
    elements.sidebar.classList.toggle('active');
    elements.overlay.classList.toggle('active');
    elements.hamburger.innerHTML = elements.sidebar.classList.contains('active') ? 
      '<i class="fas fa-times"></i>' : '<i class="fas fa-bars"></i>';
  },
  
  closeSidebar: function() {
    elements.sidebar.classList.remove('active');
    elements.overlay.classList.remove('active');
    elements.hamburger.innerHTML = '<i class="fas fa-bars"></i>';
  },
  
  showDashboard: function() {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
    navigation.closeSidebar();
  }
};

// ==============================================
// INITIALIZATION
// ==============================================
function init() {
  utils.log("Initializing B4U Esports application");
  
  // Initialize navigation
  navigation.init();
  
  // Initialize Pi Network
  piNetwork.initialize();
  
  // Make functions globally available for onclick attributes
  window.showDashboard = navigation.showDashboard;
  window.openTokenSelectionModal = modal.openTokenSelectionModal;
  window.closeTokenSelectionModal = modal.closeTokenSelectionModal;
  window.openPackageModal = modal.openPackageModal;
  window.closePackageModal = modal.closePackageModal;
  window.openPaymentModal = modal.openPaymentModal;
  window.closePaymentModal = modal.closePaymentModal;
  
  utils.log("Application initialized successfully");
}

// Start the application when the page loads
window.addEventListener('load', init);